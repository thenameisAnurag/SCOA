### **1. Concept of the Genetic Algorithm (Why and What)**

A **Genetic Algorithm (GA)** is a search algorithm inspired by the process of natural selection in biology. It mimics the way living organisms evolve and adapt to their environment. In simple terms, it tries to solve complex problems by generating multiple solutions, evaluating how "good" they are, and improving them step-by-step.

---
http://spring-boot-app-925354215034.us-east4.run.app/plantuml/79d63db4-358a-4f8c-9a37-91772a5d460b.png
### **Why Use Genetic Algorithms?**
1. **Optimization Problems**: GA is excellent for finding the "best" solution among many possible ones, even when the problem is complex and traditional methods struggle.
2. **Inspired by Nature**: GAs use natural processes like reproduction, mutation, and survival of the fittest.
3. **Flexible**: They work for many problems, even without precise mathematical formulations.

In this program, **the problem is to guess a given word** using Genetic Algorithms:
- The "target" word is like the "perfect solution" the algorithm is trying to find.
- The "fitness" evaluates how close a guessed word is to the target.
- By iteratively combining and mutating "guessed words," the algorithm evolves towards the correct answer.

---

### **Steps of a Genetic Algorithm (in this code):**
1. **Population**: Start with a random set of "guesses" (random words of the same length as the target word).
2. **Fitness Function**: Measure how "good" each word is by comparing it to the target word.
3. **Selection**: Pick the best words based on their fitness to act as "parents."
4. **Crossover**: Combine parent words to produce new "children" (next generation of guesses).
5. **Mutation**: Randomly change some letters to introduce diversity.
6. **Repeat**: Continue until a word matches the target.

---

### **2. Explanation of the Code (Beginner-Friendly)**

Letâ€™s go through the code step by step:

---

#### **Generate Initial Population**

```python
def gen_pop(length, pop_len):
    pop = []
    for _ in range(pop_len):
        pop.append(''.join(random.choices(string.ascii_lowercase, k=length)))
    return pop
```

- **Purpose**: Create a population of random "words" to start the guessing process.
- **Example**:
  - Target word: `cat` (length = 3).
  - Population of 5 random words: `["zod", "xtp", "may", "jar", "qop"]`.

---

#### **Fitness Function**

```python
def fitness(input_word, individual):
    score = 0
    for i in range(len(input_word)):
        if input_word[i] == individual[i]:
            score += 1
    return score / len(input_word)
```

- **Purpose**: Measure how close each word is to the target word.
- **How**:
  - Compare each letter of the guessed word (`individual`) with the target word (`input_word`).
  - Calculate the fraction of matching letters.
- **Example**:
  - Target word: `cat`.
  - Guessed word: `car`.
  - Matching letters: 2 (`c` and `a`), fitness = `2/3 = 0.67`.

---

#### **Evaluate the Population**

```python
def eval_population(input_word, population):
    fit_pop = {}
    for individual in population:
        fit_pop[individual] = fitness(input_word, individual)
    return fit_pop
```

- **Purpose**: Compute the fitness of every word in the population.
- **Output**: A dictionary with words as keys and their fitness as values.
- **Example**:
  - Population: `["car", "cot", "bat"]`.
  - Fitness: `{"car": 0.67, "cot": 0.33, "bat": 0.33}`.

---

#### **Breeding Population**

```python
def breeding_population(fit_pop):
    population = list(fit_pop.keys())
    fitness_values = list(fit_pop.values())
    members = random.choices(population, weights=fitness_values, k=20)
    bpop = {individual: fit_pop[individual] for individual in members}
    return bpop
```

- **Purpose**: Select the best words (based on fitness) for reproduction.
- **How**:
  - Use **weighted random selection**: Words with higher fitness are more likely to be chosen.
- **Output**: A new population (breeding population) of 20 words for the next generation.

---

#### **Create a New Generation**

```python
def create_new_population(breeding_population):
    new_population = []
    breeding_members = list(breeding_population.keys())
    for i in range(0, len(breeding_members), 2):
        parent1 = breeding_members[i]
        parent2 = breeding_members[i + 1 if i + 1 < len(breeding_members) else 0]
        child1, child2 = '', ''
        for j in range(len(parent1)):
            if random.random() < 0.5:
                child1 += parent1[j]
                child2 += parent2[j]
            else:
                child1 += parent2[j]
                child2 += parent1[j]
        new_population.append(child1)
        new_population.append(child2)
    return new_population
```

- **Purpose**: Generate a new population by combining "parent" words.
- **Crossover**: For each letter in the word, randomly choose it from one of the two parents.
- **Example**:
  - Parent 1: `car`, Parent 2: `bat`.
  - Children: `cat` and `bar`.

---

#### **Stop Condition**

```python
def stop_condition(population, threshold=0.6):
    max_fitness = max(list(population.values()))
    return max_fitness >= threshold
```

- **Purpose**: Stop when the best fitness in the population reaches or exceeds the threshold.
- **Default Threshold**: `1.0` (word guessed perfectly).

---

#### **Genetic Algorithm Main Loop**

```python
def genetic_algorithm():
    input_word = input("Enter Word: ").lower()
    population_size = 100
    population = gen_pop(len(input_word), population_size)
    generation = 0

    while True:
        generation += 1
        fit_pop = eval_population(input_word, population)

        print(f"\nGeneration {generation}:")
        for word, fitness_value in fit_pop.items():
            print(f"Word: {word}, Fitness: {fitness_value:.2f}")

        if stop_condition(fit_pop, threshold=1.0):
            members = list(fit_pop.keys())
            fit = list(fit_pop.values())
            print(f"\nWord guessed or threshold met in generation {generation}")
            best_match = members[fit.index(max(fit))]
            print(f"Best matching word: {best_match} with fitness {max(fit):.2f}")
            break

        breeding_pop = breeding_population(fit_pop)
        population = create_new_population(breeding_pop)
```

---

### **How It Works**

1. **Input**: User enters a target word (e.g., "cat").
2. **Initial Population**: Generates 100 random words.
3. **Loop**:
   - Compute fitness for each word.
   - Print the current population and fitness values.
   - Check if the best word matches the target (fitness = 1.0).
   - If not, create a new population through crossover and mutation.
4. **Stop**: When a word matches the target, print the result.

---

### **Example Run**

**Target Word**: `cat`

**Generation 1**:
- Words: `["dog", "bat", "car", "cog"]`.
- Fitness: `[0.0, 0.33, 0.67, 0.33]`.

**Generation 2**:
- Words: `["cat", "car", "cot", "bat"]`.
- Fitness: `[1.0, 0.67, 0.33, 0.33]`.

**Output**:
- **"Word guessed or threshold met in generation 2"**.
- Best word: `cat`.

---

### **Summary**
This program uses Genetic Algorithms to guess a word efficiently by evolving a population of guesses over several generations. It demonstrates how **natural selection, crossover, and mutation** can solve real-world problems, even as simple as word guessing!
